module IdMapping.

import Id.
import Sigma.
import SubstComp.
import Functor.


-- Scheme F : ★ ➔ ★ has an identity mapping if it can lift
-- any Id X Y to Id (F X) (F Y)
IdMapping ◂ (★ ➔ ★) ➔ ★ = λ F : ★ ➔ ★. 
 ∀ X : ★. ∀ Y : ★. Id · X · Y ➾ Id · (F · X) · (F · Y).


-- Every functor induces an identity mapping
fm2im ◂ ∀ F : ★ ➔ ★. Π imap : Fmap · F.  FmapIdLaw · F imap ➔ IdMapping · F 
 = Λ F. λ imap. λ idlaw. Λ X. Λ Y. Λ idl. 
   intrId · (F · X) · (F · Y) (imap · X · Y (elimId · X · Y -idl)) (idlaw · X).
